0 info it worked if it ends with ok
1 verbose cli [ '/usr/bin/nodejs', '/usr/bin/npm', 'publish' ]
2 info using npm@1.4.21
3 info using node@v0.10.25
4 verbose publish [ '.' ]
5 verbose cache add [ '.', null ]
6 verbose cache add name=undefined spec="." args=[".",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: '.',
7 verbose parsed url   path: '.',
7 verbose parsed url   href: '.' }
8 silly lockFile 3a52ce78- .
9 verbose lock . /home/cesar/.npm/3a52ce78-.lock
10 verbose tar pack [ '/home/cesar/.npm/simple_sql_generator/0.0.9/package.tgz',
10 verbose tar pack   '.' ]
11 verbose tarball /home/cesar/.npm/simple_sql_generator/0.0.9/package.tgz
12 verbose folder .
13 info prepublish simple_sql_generator@0.0.9
14 silly lockFile 1f1177db-tar tar://.
15 verbose lock tar://. /home/cesar/.npm/1f1177db-tar.lock
16 silly lockFile b27dcf8a--sql-generator-0-0-9-package-tgz tar:///home/cesar/.npm/simple_sql_generator/0.0.9/package.tgz
17 verbose lock tar:///home/cesar/.npm/simple_sql_generator/0.0.9/package.tgz /home/cesar/.npm/b27dcf8a--sql-generator-0-0-9-package-tgz.lock
18 silly lockFile 1f1177db-tar tar://.
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile b27dcf8a--sql-generator-0-0-9-package-tgz tar:///home/cesar/.npm/simple_sql_generator/0.0.9/package.tgz
21 silly lockFile b27dcf8a--sql-generator-0-0-9-package-tgz tar:///home/cesar/.npm/simple_sql_generator/0.0.9/package.tgz
22 silly lockFile cace8a71-mple-sql-generator-0-0-9-package /home/cesar/.npm/simple_sql_generator/0.0.9/package
23 verbose lock /home/cesar/.npm/simple_sql_generator/0.0.9/package /home/cesar/.npm/cace8a71-mple-sql-generator-0-0-9-package.lock
24 silly lockFile cace8a71-mple-sql-generator-0-0-9-package /home/cesar/.npm/simple_sql_generator/0.0.9/package
25 silly lockFile cace8a71-mple-sql-generator-0-0-9-package /home/cesar/.npm/simple_sql_generator/0.0.9/package
26 silly lockFile 3a52ce78- .
27 silly lockFile 3a52ce78- .
28 silly publish { name: 'simple_sql_generator',
28 silly publish   version: '0.0.9',
28 silly publish   description: 'A simple javascript library to help build sql queries',
28 silly publish   main: 'src/SimpleSQL.js',
28 silly publish   scripts: { test: 'jasmine-node specs/' },
28 silly publish   repository:
28 silly publish    { type: 'git',
28 silly publish      url: 'https://github.com/cesarpachon/simple_sql_generator.git' },
28 silly publish   keywords: [ 'javascript', 'sql', 'node.js' ],
28 silly publish   author: { name: 'cesarpachon' },
28 silly publish   license: 'GPL v3',
28 silly publish   bugs: { url: 'https://github.com/cesarpachon/simple_sql_generator/issues' },
28 silly publish   readme: '# simple_sql_generator\njavascript simple SQL generator library\n\nThis is a small library in pure javascript, intended to assist with the building of SQL strings. No intentions of becoming an ORM!\n\n##installation\nthis module can be installed via npm: \n\n```bash\nnpm install simple_sql_generator\n```\n\n##justification\nmy main need for writing this library was supporting the decorator pattern on my SQL queries.\nin a decorator pattern, objects can be chained and each element in the chain can add or modify stuff without worring about what are doing the other elements.\n\na typical example is adding auditory to every field on a database: \nsuppose you want to have organization_id, user_id in all your tables.. instead of adding those columns to every SQL sentence, you simply pass a object that represents the partially constructed query, and let other elements in the chain to add the required fields.\n\nthe key idea is that you should be able to remove the auditory element of the chain and the query still should be work (it should be SQL-valid, at least) \nalso, the auditory element may follow rules, like affecting the values or organization_id and user_id based on the role.\ni.e: \n- if role is superadmin, you won\'t add where filters because you want to get all the records.\n- if the role is admin, you will add a where filter only for organization, but will return data of all users of the given organization.\n- if the role is user, you will add both organization and user ids, returning a small subset of data. \n\nThat\'s why you will find examples (specially at the insert section) where there is delayed insertion of fields and values: that is the feature that allowed me to implement auditory as a decorator pattern.  \n\n##examples\n\n###simple select\n\njavascript: \n\n```javascript\n  //load the module\n  var SimpleSQL = require("SimpleSQL.js");\n  //create a instance of the generator\n  var sqlgen = new SimpleSQL.Generator();\n  var sql = sqlgen\n      .select()\n      .from("MySchema.table1", "t1")\n      .toSQL();\n```\n\nSQL: \n\n```SQL\nselect * from MySchema.table1 as t1\n```\n###select specifying fields\n\njavascript: \n\n```javascript\n  //load the module\n  var SimpleSQL = require("SimpleSQL.js");\n  //create a instance of the generator\n  var sqlgen = new SimpleSQL.Generator();\n  var sql = sqlgen\n      .select(["t1.field1", "t1.field2 as f2"])\n      .from("MySchema.table1", "t1")\n      .toSQL();\n```\n\nSQL: \n\n```SQL\nselect t1.field1, t1.field2 as f2 from MySchema.table1 as t1\n```\n\n\n###select with simple join\n\njavascript: \n\n```javascript\nvar sql = sqlgen\n  .select(["t1.field1", "t1.field2 as f2"])\n  .from("MySchema.table1", "t1")\n  .from("MySchema.table2", "t2")\n  .where()\n  .join("t1.field2", "t2.field2")\n  .toSQL();\n```\n\nSQL: \n\n```SQL\nselect t1.field1, t1.field2 as f2 \nfrom MySchema.table1 as t1, MySchema.table2 as t2 \nwhere t1.field2 = t2.field2\n```\n\n###select with explicit first where clause, "and" and "or":\n\n```javascript\nvar sql = sqlgen\n  .select(["t1.field1", "t1.field2 as f2", "t1.field3"])\n  .from("MySchema.table1", "t1")\n  .where("t1.field", ">", 0)\n  .and("t1.field3", "equals", "bar")\n  .or("f2", "is", "null")\n```\n\n```SQL\nselect t1.field1, t1.field2 as f2, t1.field3 \nfrom MySchema.table1 as t1\nwhere t1.field > 0 and t1.field3 equals \'bar\' or f2 is null\n```\n###select with in, having, group by, order by, limit\n\n```javascript\nvar sql = sqlgen\n  .select(["pic.idpicture", "pic.name", "pic.mime_type", "pic.s3key", "count(0) as relevance"])\n  .from("MediaLib.pictures", "pic")\n  .from("MediaLib.pictures_tags", "tag")\n  .where()\n  .join("pic.idpicture", "tag.idpicture")\n  .in("tag.tag", ["no_distraction", "appliances", "lamp"])\n  .groupBy(["pic.idpicture", "pic.name", "pic.mime_type", "pic.s3key"])\n  .having("relevance", "=", 3)\n  .orderBy("relevance", "desc")\n  .limit(100)\n  .toSQL();\n```\n\n```SQL\nselect pic.idpicture, pic.name, pic.mime_type, pic.s3key, count(0) as relevance \nfrom MediaLib.pictures as pic, MediaLib.pictures_tags as tag  \nwhere pic.idpicture = tag.idpicture \nand  tag.tag in (\'no_distraction\', \'appliances\', \'lamp\') \ngroup by pic.idpicture, pic.name, pic.mime_type, pic.s3key \nhaving relevance = 3 \norder by relevance desc \nlimit 100\n```\n###simple insert\n\n```javascript\nvar sql = sqlgen\n  .insertInto("t1", ["f1"])\n  .values([{f1:"v1"}, {f1:"v2"}, {f1:"v3"}])\n  .toSQL();\n```\n\n```SQL\ninsert into t1 (f1) values (\'v1\', \'v2\', \'v3\')\n```\n\n###insert with multiple fields\n\n```javascript\nvar sql = sqlgen\n  .insertInto("t1", ["f1", "f2"])\n  .values([{f1:"v11", f2:"v12"}, {f1:"v21", f2:"v22"}])\n  .toSQL();\n```\n\n```SQL\n insert into t1 (f1, f2) values ((\'v11\', \'v12\'), (\'v21\', \'v22\'))\n```\n###insert with delayed fields\n\n```javascript\nsqlgen\n  .insertInto("t1", ["f1"]);\n\n//appending a new field before adding values\nvar sql = sqlgen.insertInto(["f2"])\n  .values([{f1:"v11", f2:"v12"}, {f1:"v21", f2:"v22"}])\n  .toSQL();\n```\n\n```SQL\ninsert into t1 (f1, f2) values ((\'v11\', \'v12\'), (\'v21\', \'v22\'))\n```\n###insert with delayed values\n\n```javascript\nsqlgen\n  .insertInto("t1", ["f1", "f2"])\n  .values([{f1:"v11", f2:"v12"}]);\n\n  //appending more values, sometime later.. \n  var sql = sqlgen.values([{f1:"v21", f2:"v22"}])\n  .toSQL();\n```\n\n```SQL\ninsert into t1 (f1, f2) values ((\'v11\', \'v12\'), (\'v21\', \'v22\'))\n```\n##tests\n\n###insert with delayed fields and values\n\n```javascript\n//at this point, we only know a field, so we populate values with it.\nsqlgen\n  .insertInto("t1", ["f1"])\n  .values([{f1:"v11"}, {f1: "v12"}]);\n\n//later, we need to add a new field.. and set the new field on the existing values\nsqlgen.insertInto(["f2"]);\n//passing no arguments will return the internal values array\nsqlgen.values().forEach(function(val, i){\n  val.f2 = "v2"+(i+1);\n});\n var sql = sqlgen.toSQL();\n```\n\n```SQL\ninsert into t1 (f1, f2) values ((\'v11\', \'v21\'), (\'v12\', \'v22\'))\n```\njasmine tests are located in the specs folder. \nrun them with: \n```bash\njasmine-node specs/\n```\n\n',
28 silly publish   readmeFilename: 'README.md',
28 silly publish   gitHead: '7b4fc61131750dc2b733dcf5a4a247375f1f1934',
28 silly publish   _id: 'simple_sql_generator@0.0.9',
28 silly publish   _shasum: 'cf037637c8cbe13cc489ba7f98797778fe442488',
28 silly publish   _from: '.' }
29 verbose request where is /simple_sql_generator
30 verbose request registry https://registry.npmjs.org/
31 verbose request id 1f349bf634fa0aa7
32 verbose url raw /simple_sql_generator
33 verbose url resolving [ 'https://registry.npmjs.org/', './simple_sql_generator' ]
34 verbose url resolved https://registry.npmjs.org/simple_sql_generator
35 verbose request where is https://registry.npmjs.org/simple_sql_generator
36 info trying registry request attempt 1 at 17:57:55
37 http PUT https://registry.npmjs.org/simple_sql_generator
38 http 403 https://registry.npmjs.org/simple_sql_generator
39 verbose headers { 'content-type': 'application/json',
39 verbose headers   'cache-control': 'max-age=300',
39 verbose headers   'content-length': '95',
39 verbose headers   'accept-ranges': 'bytes',
39 verbose headers   date: 'Fri, 20 Jan 2017 22:57:57 GMT',
39 verbose headers   via: '1.1 varnish',
39 verbose headers   connection: 'keep-alive',
39 verbose headers   'x-served-by': 'cache-atl6248-ATL',
39 verbose headers   'x-cache': 'MISS',
39 verbose headers   'x-cache-hits': '0',
39 verbose headers   'x-timer': 'S1484953076.048821,VS0,VE1120',
39 verbose headers   vary: 'Accept-Encoding' }
40 error publish Failed PUT 403
41 error Error: "You cannot publish over the previously published version 0.0.9." : simple_sql_generator
41 error     at RegClient.<anonymous> (/usr/share/npm/node_modules/npm-registry-client/lib/request.js:300:14)
41 error     at Request._callback (/usr/share/npm/node_modules/npm-registry-client/lib/request.js:238:65)
41 error     at Request.self.callback (/usr/lib/nodejs/request/index.js:148:22)
41 error     at Request.EventEmitter.emit (events.js:98:17)
41 error     at Request.<anonymous> (/usr/lib/nodejs/request/index.js:896:14)
41 error     at Request.EventEmitter.emit (events.js:117:20)
41 error     at IncomingMessage.<anonymous> (/usr/lib/nodejs/request/index.js:847:12)
41 error     at IncomingMessage.EventEmitter.emit (events.js:117:20)
41 error     at _stream_readable.js:920:16
41 error     at process._tickCallback (node.js:415:13)
42 error If you need help, you may report this *entire* log,
42 error including the npm and node versions, at:
42 error     <http://github.com/npm/npm/issues>
43 error System Linux 4.2.0-42-generic
44 error command "/usr/bin/nodejs" "/usr/bin/npm" "publish"
45 error cwd /home/cesar/projects/simple_sql_generator
46 error node -v v0.10.25
47 error npm -v 1.4.21
48 verbose exit [ 1, true ]
